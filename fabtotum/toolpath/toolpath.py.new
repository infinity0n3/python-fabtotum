#! /usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2016 Daniel Kesler <kesler.daniel@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from shapely.geometry import Point,LineString,Polygon,box
from shapely.ops import cascaded_union
from shapely.ops import linemerge
from shapely import affinity
from shapely import speedups

from pprint import pprint

if speedups.available:
    speedups.enable()

def project_point_to_object(point, geometry):
    """Find nearest point in geometry, measured from given point.
    
    Args:
        point: a shapely Point
        geometry: a shapely geometry object (LineString, Polygon)
        
    Returns:
        a shapely Point that lies on geometry closest to point
    """
    from sys import maxint
    nearest_point = None
    min_dist = maxint
    
    if isinstance(geometry, Polygon):
        for seg_start, seg_end in pairs(list(geometry.exterior.coords)):
            line_start = Point(seg_start)
            line_end = Point(seg_end)
        
            intersection_point = project_point_to_line(point, line_start, line_end)
            cur_dist =  point.distance(intersection_point)
        
            if cur_dist < min_dist:
                min_dist = cur_dist
                nearest_point = intersection_point
    
    elif isinstance(geometry, LineString):
        for seg_start, seg_end in pairs(list(geometry.coords)):
            line_start = Point(seg_start)
            line_end = Point(seg_end)
        
            intersection_point = project_point_to_line(point, line_start, line_end)
            cur_dist =  point.distance(intersection_point)
        
            if cur_dist < min_dist:
                min_dist = cur_dist
                nearest_point = intersection_point
    else:
        raise NotImplementedError("project_point_to_object not implemented for"+
                                  " geometry type '" + geometry.type + "'.")
    return nearest_point


class ToolpathContext(object):
    """ Gerber rendering context base class

    Provides basic functionality and API for generating toolpath.

    Attributes
    ----------

    drill_color : tuple (<float>, <float>, <float>)
        Color used for rendering drill hits. Format is the same as for `color`.
    """

    def __init__(self):
        self._tool_list = []
        
    def add_tool(self, tool_d):
        self._tool_list.append(tool_d)

    def generate_paths(self, shapes, tool_d):
        print("Add toolpath generation algorithm")
        return None

    def connect_paths(self, paths, shapes, tool_d):
        tmp = paths[:]
        conn = []
        tool_r = tool_d / 2.0
        
        while tmp:
            t1 = tmp[0]
            t2 = None
            dmin = 1e6
            tmp.remove(t1)
        
            for tt in tmp:
                d = tt.distance(t1)
                if d < dmin:
                    t2 = tt
                    dmin = d
                
            if t2:
                tmp.remove(t2)
                #self.find_closest_point(t1,t2,dmin)
                d2 = (dmin / 2.0)
                p1 = t1.buffer(d2)
                p2 = t2.buffer(d2)
                
                it = p1.intersection(p2)
                
                p1 = Polygon(t1)
                p2 = Polygon(t2)
                marge = [p1, p2]
                
                if it.geom_type == 'MultiLineString':
                    x = list(it)
                else:
                    x = [it]
                
                for i in x:
                    if i.geom_type == 'LineString':
                        if i.length >= tool_d*2:
                            l1 = i.parallel_offset(d2, side='right')
                            l2 = i.parallel_offset(d2, side='left')
                            mp1 = l1.interpolate(l1.length/2)
                            mp2 = l2.interpolate(l2.length/2)
                            p3 = Polygon( LineString([mp1,mp2]).buffer(tool_r,cap_style=3) )
                            marge.append(p3)
                            break
                            
                p4 = cascaded_union(marge)
                tmp.append( p4.exterior )
            else:
                conn.append( t1.exterior )
                
            if len(tmp) == 1:
                conn.append( tmp[0] )
                break
            print('paths', len(tmp) )
                
        return conn

    def generate(self, shapes):
        print("Generating paths")
        tool_d = self._tool_list[0]
        paths = self.generate_paths(shapes, tool_d)
        print("Connecting paths")
        conn = self.connect_paths(paths, shapes, tool_d)
        #return (paths,conn)
        return conn
        
